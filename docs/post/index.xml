<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 黄金之心号|博客</title>
    <link>https://mengsheng.me/post/</link>
    <description>Recent content in Posts on 黄金之心号|博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 21 May 2019 03:59:25 +0800</lastBuildDate>
    
	<atom:link href="https://mengsheng.me/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Two</title>
      <link>https://mengsheng.me/post/two/</link>
      <pubDate>Tue, 21 May 2019 03:59:25 +0800</pubDate>
      
      <guid>https://mengsheng.me/post/two/</guid>
      <description>ttt</description>
    </item>
    
    <item>
      <title>220v交流转12v直流 - 线性稳压电源</title>
      <link>https://mengsheng.me/post/220v%E4%BA%A4%E6%B5%81%E8%BD%AC12v%E7%9B%B4%E6%B5%81-%E7%BA%BF%E6%80%A7%E7%A8%B3%E5%8E%8B%E7%94%B5%E6%BA%90/</link>
      <pubDate>Tue, 21 May 2019 02:51:43 +0800</pubDate>
      
      <guid>https://mengsheng.me/post/220v%E4%BA%A4%E6%B5%81%E8%BD%AC12v%E7%9B%B4%E6%B5%81-%E7%BA%BF%E6%80%A7%E7%A8%B3%E5%8E%8B%E7%94%B5%E6%BA%90/</guid>
      <description> 这个电路将220v交流转换为12v直流，电流输出不超过 1A，因此适用于不需要大电流的场合。如果需要大电流(比如 3A的电流)，应选择开关电源电路。这个电路的优点是搭建方便，缺点是转换效率低，输出电流低。
整体原理图 原理图分析: 220v 交流电压经 220vAC-12vAC 的变压器后，输出 12v 交流。12v 交流经整流桥后整流为 12v 直流。12v 直流经线性稳压芯片 L7812 后输出稳定的 12v 直流。 2 个电解电容和 2 个独石电容用来滤去电路中的波纹。
整流桥可以选择集成芯片 DB107， 也可以使用四只二极管(比如1N4007)搭建。L7812 的输入为12v ~ 35v 的直流电压， 输出为稳定的 12v 直流电压。
引脚连接 7812 引脚图如下，从正面看，从左到右依次为 输入(input)、地(gnd)、输出(output)。 DB107 引脚图如下，标注 &amp;lsquo;~&amp;rsquo; 为交流输入，标注 &amp;lsquo;+&amp;rsquo;,&amp;lsquo;-&amp;rsquo; 为直流输出。
焊接时注意事项  这个电路使用洞洞板焊接比较方便。 L7812 引脚较粗，选择板子时最好试插一下。 两个电解电容要注意极性。 可以给 7812 装一个小的散热片。 如果选用二极管组成整流桥，应留出四个引出点。  </description>
    </item>
    
    <item>
      <title>First</title>
      <link>https://mengsheng.me/post/first/</link>
      <pubDate>Tue, 21 May 2019 02:16:45 +0800</pubDate>
      
      <guid>https://mengsheng.me/post/first/</guid>
      <description></description>
    </item>
    
    <item>
      <title>centos 安装 python3</title>
      <link>https://mengsheng.me/post/centos-%E5%AE%89%E8%A3%85-python3/</link>
      <pubDate>Mon, 25 Mar 2019 23:28:43 +0800</pubDate>
      
      <guid>https://mengsheng.me/post/centos-%E5%AE%89%E8%A3%85-python3/</guid>
      <description>环境: centos 7.5
从源代码安装 python3 编译python需要 gcc 编译器、ziplib 等库文件，使用下面命令安装这些预先条件
yum install gcc openssl-devel bzip2-devel libffi-devel zlib-devel sqlite-devel
下载 python 源代码
wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tgz
解压
tar -xzvf Python-3.7.2.tgz
进入解压目录
cd Python-3.7.2
编译，其中 &amp;ndash;prefix 选项可以将 python3 安装到该目录
./configure --prefix=/usr/local/python3
安装
make &amp;amp;&amp;amp; make install
添加python3 的符号链接
ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3
查看是否安装成功
python3 -V 安装pip3 下载 get-pip.py 源文件
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
调用 python3 安装
python3 get-pip.py
查看 pip3 是否已下载
ls /usr/local/python3/bin/pip3
如果上面的文件存在的话，创建它的软连接到 /usr/local/bin</description>
    </item>
    
    <item>
      <title>树莓派 &#43; HC SR04 测距模块</title>
      <link>https://mengsheng.me/post/%E6%A0%91%E8%8E%93%E6%B4%BE-&#43;-hc-sr04-%E6%B5%8B%E8%B7%9D%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Mon, 03 Dec 2018 21:26:43 +0800</pubDate>
      
      <guid>https://mengsheng.me/post/%E6%A0%91%E8%8E%93%E6%B4%BE-&#43;-hc-sr04-%E6%B5%8B%E8%B7%9D%E6%A8%A1%E5%9D%97/</guid>
      <description>超声波测距模块 HC-SR04 非常易于使用，这篇文章就介绍 HC-SR04 的测距原理、树莓派如何与 HC-SR04 接线，以及使用 python 程序控制测距的方法。
HC-SR04 测距过程 下图说明了超声波的测距原理: HC-SR04 引脚图: HC-SR04 模块包含了超声波发射器、超声波接收器和控制电路，可以提供 3cm - 4m 的距离测量。引脚图如上图所示有4个引脚：电源引脚(5v Vcc),触发脉冲引脚(Trig),返回脉冲引脚(Echo),地引脚(Gnd)。 如何使用呢？下面是 HC-SR04 的工作过程： 1. 树莓派向 Trig 脚发送一个持续时间至少为 10us 的高电平信号。 2. HC-SR04 接收到树莓派的触发信号，自动发送 40 Khz 的超声波，并把 Echo 脚置为高电平。然后开始检测返回的声波。 3. 当检测到返回的声波时，Echo 脚被置为低电平。
从上述过程可以看出，Echo 脚的高电平持续时间就是超声波从发射到返回所经过的时间间隔 T。那么传感器和物体间的距离就能用下面的公式计算： 距离(Distance) = 超声波速度(340m/s) * 时间 T / 2
HC-SR04 与树莓派的接线 树莓派 GPIO 引脚图 接线图  电源引脚 Vcc 与树莓派的 5v 脚（物理引脚2）相连，地引脚 Gnd 与树莓派的 Gnd 脚（物理引脚6）相连。
 触发脉冲引脚 Trig 用来接收来自树莓派的控制信号，接任意 GPIO 口。图中连接了 GPIO_23（物理引脚16)。</description>
    </item>
    
    <item>
      <title>树莓派入门(三)自动连接 wifi</title>
      <link>https://mengsheng.me/post/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%B8%89%E8%87%AA%E5%8A%A8%E8%BF%9E%E6%8E%A5-wifi/</link>
      <pubDate>Sat, 22 Sep 2018 20:26:43 +0800</pubDate>
      
      <guid>https://mengsheng.me/post/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%B8%89%E8%87%AA%E5%8A%A8%E8%BF%9E%E6%8E%A5-wifi/</guid>
      <description>既然树莓派3搭载了无线网卡，那么最方便的连接网络的方法就是 wifi 了，而且若你的 pc 连接了同一个网络的话还可以 ssh 上去控制它。但要注意树莓派可能连接不了 5G 频率的无线网络。要进行这一节的内容，首先确保你安装好了 raspbian 系统，并且能够 ssh 到树莓派。
方式一 图形界面 raspi-config 如果你用的 raspbian 系统较新的话，就可以使用图形界面 raspi-config 来配置 wifi。 1. 先 ssh 进树莓派，输入 sudo raspi-config 进入设置界面。使用上下箭头进行选择，ENTER 键确认选择，依次进入 2.Network Options - Wi-Fi ，选择国家代码(CN)，然后在 SSID 界面输入无线网络的名称，在 Passphrase 界面输入密码，按回车键确认就配置好了。最后 ESC 返回命令行。
![raspi-config.png](https://i.loli.net/2018/09/22/5ba64502eef8e.png) ![country_code.png](https://i.loli.net/2018/09/22/5ba645029cfc6.png)   输入 sudo reboot 重启树莓派，把树莓派的网线拔掉。 在路由器管理界面或在 PC 上使用 nmap 查找树莓派的 ip ，若能找到则说明树莓派成功连入无线网络了。(若没有就是配置过程不正确，比如无线网络名字或密码打错)。 使用上一步的 ip ssh 到树莓派，输入 sudo ifconfig wlan0 查看无线网络连接。
  方式二 命令行  安装 vim, sudo apt-get install vim.</description>
    </item>
    
    <item>
      <title>树莓派入门(二)ssh.md</title>
      <link>https://mengsheng.me/post/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BA%8Cssh/</link>
      <pubDate>Fri, 21 Sep 2018 23:28:43 +0800</pubDate>
      
      <guid>https://mengsheng.me/post/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BA%8Cssh/</guid>
      <description>在安装好 raspbian 系统后，可以准备 ssh 到树莓派上了。首先要开启 ssh 功能.自 Raspbian 在 2016年11月发布更新后，系统的 ssh 功能是默认关闭的。要开启 ssh 也很简单，只需在raspbian SD 卡的根目录新建一个名为 ssh （无后缀）的空白文件，然后将内存卡插入树莓派，开机后 raspbian 会自动开启 ssh 功能。
需要的工具  一根网线 一台PC
  ssh 需要树莓派的 ip 地址。下面是获取地址的两种方式。
方式一 利用无线路由器 如果你所在的网络使用了路由器，那么事情很简单。 1. 用网线将树莓派与路由器连接起来 2. 树莓派重启后会被路由器分配一个 ip 地址 3. 进入路由器管理界面(通常为 192.168.1.1)，查看树莓派的 ip。
![router_pi_ip.png](https://i.loli.net/2018/09/22/5ba5d52a6b8fc.png)  方式二 利用手机热点(windows 系统) 比方式一略复杂。我们知道连接到同一个手机热点的设备都在同一个局域网之下，我们要利用这一点。
 通过网线将 PC 和树莓派连接到一起。 开启手机热点，将PC 连接到该热点。 按下 win+x 键，随后按 w 键进入网络设置，点击更改适配器选项进入网络连接页面。
 在无线网络连接上点击鼠标右键 —— 属性， 在共享一栏的“允许其他网络用户通过此计算机的 internet 连接来连接(N)” 打勾，最后点击&amp;rdquo;确定&amp;rdquo;更改设置。</description>
    </item>
    
    <item>
      <title>树莓派入门(一)安装系统</title>
      <link>https://mengsheng.me/post/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%B8%80%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Fri, 21 Sep 2018 21:33:43 +0800</pubDate>
      
      <guid>https://mengsheng.me/post/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%B8%80%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/</guid>
      <description>需要的工具  至少 8 GB 的内存卡 + 读卡器 + PC raspbian 系统映像文件(zip格式) : Raspbian 刻录软件 : etcher  安装过程  raspbian 系统有两个可选:  ‘RASPBIAN STRETCH WITH DESKTOP’，带桌面环境， ‘RASPBIAN STRETCH LITE’，不带桌面环境，只能通过命令行控制。
根据需要下载相应的 raspbian 系统，然后下载并安装刻录软件 etcher 。  格式化。将插有内存卡的读卡器连接电脑，格式化内存卡。 刻录。 打开刻录软件 etcher.  选择 raspbian.zip 文件 选择内存卡 点击 Flash 开始刻录。
   至此系统安装完成，将内存卡插入树莓派后，通电开机即可 🍞。
（可选）开启 ssh 功能，自 Raspbian 在 2016年11月发布更新后，系统的 ssh 功能是默认关闭的。要开启 ssh 也很简单，只需在 SD 卡的根目录新建一个名为 ssh （无后缀）的空白文件，然后将内存卡插入树莓派，开机后 raspbian 会自动开启 ssh 功能。</description>
    </item>
    
    <item>
      <title>8051 单片机设置定时器</title>
      <link>https://mengsheng.me/post/8051-%E5%8D%95%E7%89%87%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mengsheng.me/post/8051-%E5%8D%95%E7%89%87%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E5%99%A8/</guid>
      <description> 定时器有计数脉冲和定时两种模式，这篇文章写的是使用定时器0的16位定时器编写 1s 定时的程序过程。
定时器是如何定时的 首先单片机是根据晶振发出的脉冲进行工作的，比如一个 stc 单片机使用了 12MHz 的外部晶振，这个晶振每秒会发出 12M = 12000000 个脉冲供单片机运行使用。反过来算一下，一个脉冲持续多少时间呢？ 1&amp;frasl;12000000 s= 1&amp;frasl;12 us。 那么如果我们要定时 1us ，只需要计数 12 个脉冲。
设置定时器 我们了解到定时 1us ，需要计数 12 个脉冲(12M 晶振的情况下)。 那么定时 1ms ，需要计数 12000 个脉冲。 首先要开启总中断使能和定时器0使能
#include &amp;quot;stc12c5a60s2.h&amp;quot; #define FOSC 12000000L sbit P2_0 = P2^0; int main() { // 开启总中断和定时器0中断 EA = 1; ET0 = 1; // 设置定时器0工作在16位定时器模式 TMOD = 0x01; // 1ms 定时 TH0 = (65536 - FOSC/12/1000)/256; TL0 = (65536 - FOSC/12/1000)%256; // 定时器计时开始 TR0 = 1; while(1); } void Timer0_Rountine(void) interrupt 1 { // 重装载定时器 TH0 = (65536 - FOSC/12/1000)/256; TL0 = (65536 - FOSC/12/1000)%256; // 你要执行的任务，每1ms 执行一次 // 任务代码 }  </description>
    </item>
    
    <item>
      <title>python 多线程</title>
      <link>https://mengsheng.me/post/python-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mengsheng.me/post/python-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>在进行 IO 密集型任务时，比如编写网络爬虫、读写文件相关的脚本，使用多线程可以显著提高程序的运行速度。下面是一个线性执行任务的代码和相同功能但是引入多线程的代码，来比较它们一下性能差距。
原始代码: import urllib.request import time import socket def get_result(url): try: res = urllib.request.urlopen(url, timeout=3) page = res.read() print(url, len(page)) # 捕捉连接超时异常 except socket.timeout: print(&amp;quot;time out\n&amp;quot;) if __name__ == &amp;quot;__main__&amp;quot;: start = time.time() sites = [ &#39;https://www.baidu.com&#39;, &#39;https://www.sogou.com/&#39;, &#39;https://www.taobao.com&#39;, &#39;https://www.jd.com/&#39;, &#39;https://www.mi.com/&#39;, &#39;http://www.sina.com.cn/&#39;, &#39;https://www.163.com/&#39;, &#39;https://36kr.com/&#39;, &#39;https://www.ifanr.com/&#39;, &#39;https://www.huxiu.com/&#39; ] for url in sites: get_result(url) end = time.time() print(&amp;quot;cost {}&amp;quot;.format(end - start))  上面代码的功能是依次访问 sites 列表中的 url, 并打印出该 url 和其页面的大小。 执行结果为</description>
    </item>
    
  </channel>
</rss>